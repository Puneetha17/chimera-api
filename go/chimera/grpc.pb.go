// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

package chimera // import "go/chimera"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientClient is the client API for Client service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientClient interface {
	// Get version of the server running
	Version(ctx context.Context, in *ApiVersion, opts ...grpc.CallOption) (*ApiVersion, error)
	// Checks if the server is running
	Upcheck(ctx context.Context, in *UpCheckResponse, opts ...grpc.CallOption) (*UpCheckResponse, error)
	// Used to store a transaction in the Chimera node
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	// Retrieve a transaction from the Chimera node
	Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveResponse, error)
	// Update the partyinfo with response from all the nodes connnected to the node
	UpdatePartyInfo(ctx context.Context, in *PartyInfo, opts ...grpc.CallOption) (*PartyInfoResponse, error)
	// Propogate payload to remote node
	Push(ctx context.Context, in *PushPayload, opts ...grpc.CallOption) (*PartyInfoResponse, error)
}

type clientClient struct {
	cc *grpc.ClientConn
}

func NewClientClient(cc *grpc.ClientConn) ClientClient {
	return &clientClient{cc}
}

func (c *clientClient) Version(ctx context.Context, in *ApiVersion, opts ...grpc.CallOption) (*ApiVersion, error) {
	out := new(ApiVersion)
	err := c.cc.Invoke(ctx, "/protofiles.Client/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) Upcheck(ctx context.Context, in *UpCheckResponse, opts ...grpc.CallOption) (*UpCheckResponse, error) {
	out := new(UpCheckResponse)
	err := c.cc.Invoke(ctx, "/protofiles.Client/Upcheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, "/protofiles.Client/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveResponse, error) {
	out := new(ReceiveResponse)
	err := c.cc.Invoke(ctx, "/protofiles.Client/Receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) UpdatePartyInfo(ctx context.Context, in *PartyInfo, opts ...grpc.CallOption) (*PartyInfoResponse, error) {
	out := new(PartyInfoResponse)
	err := c.cc.Invoke(ctx, "/protofiles.Client/UpdatePartyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) Push(ctx context.Context, in *PushPayload, opts ...grpc.CallOption) (*PartyInfoResponse, error) {
	out := new(PartyInfoResponse)
	err := c.cc.Invoke(ctx, "/protofiles.Client/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServer is the server API for Client service.
type ClientServer interface {
	// Get version of the server running
	Version(context.Context, *ApiVersion) (*ApiVersion, error)
	// Checks if the server is running
	Upcheck(context.Context, *UpCheckResponse) (*UpCheckResponse, error)
	// Used to store a transaction in the Chimera node
	Send(context.Context, *SendRequest) (*SendResponse, error)
	// Retrieve a transaction from the Chimera node
	Receive(context.Context, *ReceiveRequest) (*ReceiveResponse, error)
	// Update the partyinfo with response from all the nodes connnected to the node
	UpdatePartyInfo(context.Context, *PartyInfo) (*PartyInfoResponse, error)
	// Propogate payload to remote node
	Push(context.Context, *PushPayload) (*PartyInfoResponse, error)
}

func RegisterClientServer(s *grpc.Server, srv ClientServer) {
	s.RegisterService(&_Client_serviceDesc, srv)
}

func _Client_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protofiles.Client/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Version(ctx, req.(*ApiVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_Upcheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpCheckResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Upcheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protofiles.Client/Upcheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Upcheck(ctx, req.(*UpCheckResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protofiles.Client/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protofiles.Client/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Receive(ctx, req.(*ReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_UpdatePartyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).UpdatePartyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protofiles.Client/UpdatePartyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).UpdatePartyInfo(ctx, req.(*PartyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protofiles.Client/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Push(ctx, req.(*PushPayload))
	}
	return interceptor(ctx, in, info, handler)
}

var _Client_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protofiles.Client",
	HandlerType: (*ClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Client_Version_Handler,
		},
		{
			MethodName: "Upcheck",
			Handler:    _Client_Upcheck_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Client_Send_Handler,
		},
		{
			MethodName: "Receive",
			Handler:    _Client_Receive_Handler,
		},
		{
			MethodName: "UpdatePartyInfo",
			Handler:    _Client_UpdatePartyInfo_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _Client_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor_grpc_1654e5a1d2ebf374) }

var fileDescriptor_grpc_1654e5a1d2ebf374 = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8f, 0xcf, 0x4a, 0xeb, 0x40,
	0x14, 0xc6, 0x69, 0x6f, 0x6f, 0x7b, 0x39, 0x70, 0x6f, 0xaf, 0x23, 0x55, 0x49, 0x75, 0x93, 0x65,
	0x17, 0x13, 0x50, 0x10, 0xec, 0xae, 0xed, 0xca, 0x8d, 0x84, 0x4a, 0x45, 0x5c, 0x08, 0xd3, 0xf4,
	0x34, 0x19, 0x9a, 0xce, 0x19, 0x33, 0x93, 0x42, 0xb7, 0xbe, 0x82, 0x6f, 0xe1, 0xeb, 0xf8, 0x08,
	0xfa, 0x20, 0x92, 0x3f, 0xd6, 0x88, 0x55, 0x57, 0x21, 0xbf, 0xef, 0x3b, 0xbf, 0xe1, 0x03, 0x08,
	0x13, 0x1d, 0x70, 0x9d, 0x90, 0x25, 0x06, 0xf9, 0x67, 0x2e, 0x63, 0x34, 0xce, 0x61, 0x48, 0x14,
	0xc6, 0xe8, 0x09, 0x2d, 0x3d, 0xa1, 0x14, 0x59, 0x61, 0x25, 0x29, 0x53, 0x34, 0x9d, 0x7f, 0x4b,
	0x34, 0x46, 0x84, 0x58, 0xfe, 0x1f, 0x3f, 0xff, 0x82, 0xe6, 0x28, 0x96, 0xa8, 0x2c, 0xbb, 0x80,
	0xd6, 0x15, 0x26, 0x46, 0x92, 0x62, 0x7b, 0xfc, 0x5d, 0xc8, 0x07, 0x5a, 0x96, 0xdc, 0xf9, 0x82,
	0xbb, 0xbb, 0xf7, 0x4f, 0x2f, 0x0f, 0xf5, 0xbf, 0xee, 0x1f, 0x6f, 0x55, 0x90, 0x7e, 0xad, 0xc7,
	0xae, 0xa1, 0x35, 0xd1, 0x41, 0x84, 0xc1, 0x82, 0x75, 0xab, 0x77, 0x13, 0x3d, 0xca, 0xe0, 0x18,
	0x8d, 0x26, 0x65, 0xd0, 0xf9, 0x2e, 0xac, 0x98, 0xd3, 0xc2, 0x95, 0x99, 0xcf, 0xa0, 0x71, 0x89,
	0x6a, 0xc6, 0xf6, 0xab, 0x97, 0x19, 0x19, 0xe3, 0x5d, 0x8a, 0xc6, 0x3a, 0x07, 0x9f, 0x83, 0xc2,
	0xc7, 0x86, 0xd0, 0x1a, 0x63, 0x80, 0x72, 0x85, 0xcc, 0xa9, 0x96, 0x4a, 0xf8, 0x26, 0xe8, 0x6e,
	0xcd, 0x4a, 0xc7, 0x2d, 0xb4, 0x27, 0x7a, 0x26, 0x2c, 0xfa, 0x22, 0xb1, 0xeb, 0x73, 0x35, 0x27,
	0xd6, 0xa9, 0xf6, 0x37, 0xd8, 0x39, 0xda, 0x8a, 0x37, 0xe3, 0x3a, 0xf9, 0xb8, 0xb6, 0x0b, 0x9e,
	0xce, 0x32, 0xa9, 0xe6, 0x94, 0xcd, 0xf3, 0xa1, 0xe1, 0xa7, 0x26, 0xfa, 0x38, 0x2f, 0x23, 0xbe,
	0x58, 0xc7, 0x24, 0x66, 0x3f, 0x69, 0xff, 0xe7, 0x5a, 0x70, 0x7f, 0x7b, 0x3a, 0x35, 0x51, 0xbf,
	0xd6, 0x1b, 0x9e, 0x02, 0x93, 0xc4, 0xa7, 0xf1, 0x82, 0x07, 0x91, 0x5c, 0x62, 0x22, 0xb8, 0xd0,
	0xd2, 0xaf, 0xdd, 0x40, 0x48, 0x5e, 0x49, 0x1e, 0xeb, 0x3b, 0xc3, 0x78, 0x21, 0x89, 0x8f, 0xca,
	0xc6, 0x40, 0xcb, 0x69, 0x33, 0x7f, 0xe7, 0xe4, 0x35, 0x00, 0x00, 0xff, 0xff, 0xb4, 0xf9, 0x72,
	0x6b, 0x6c, 0x02, 0x00, 0x00,
}
